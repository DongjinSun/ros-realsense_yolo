// Generated by gencpp from file yolov3_pytorch_ros/target.msg
// DO NOT EDIT!


#ifndef YOLOV3_PYTORCH_ROS_MESSAGE_TARGET_H
#define YOLOV3_PYTORCH_ROS_MESSAGE_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolov3_pytorch_ros
{
template <class ContainerAllocator>
struct target_
{
  typedef target_<ContainerAllocator> Type;

  target_()
    : y(0)
    , x(0)
    , z(0)
    , type()  {
    }
  target_(const ContainerAllocator& _alloc)
    : y(0)
    , x(0)
    , z(0)
    , type(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _y_type;
  _y_type y;

   typedef uint16_t _x_type;
  _x_type x;

   typedef uint16_t _z_type;
  _z_type z;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::yolov3_pytorch_ros::target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov3_pytorch_ros::target_<ContainerAllocator> const> ConstPtr;

}; // struct target_

typedef ::yolov3_pytorch_ros::target_<std::allocator<void> > target;

typedef boost::shared_ptr< ::yolov3_pytorch_ros::target > targetPtr;
typedef boost::shared_ptr< ::yolov3_pytorch_ros::target const> targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov3_pytorch_ros::target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov3_pytorch_ros::target_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yolov3_pytorch_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'yolov3_pytorch_ros': ['/home/sun/ros_ws/src/yolov3_pytorch_ros/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yolov3_pytorch_ros::target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov3_pytorch_ros::target_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov3_pytorch_ros::target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov3_pytorch_ros::target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov3_pytorch_ros::target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov3_pytorch_ros::target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov3_pytorch_ros::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c02c663e73d4d8954e2848abf519bef";
  }

  static const char* value(const ::yolov3_pytorch_ros::target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c02c663e73d4d89ULL;
  static const uint64_t static_value2 = 0x54e2848abf519befULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov3_pytorch_ros::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov3_pytorch_ros/target";
  }

  static const char* value(const ::yolov3_pytorch_ros::target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov3_pytorch_ros::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 y\n\
uint16 x\n\
uint16 z\n\
string type\n\
\n\
\n\
";
  }

  static const char* value(const ::yolov3_pytorch_ros::target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov3_pytorch_ros::target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.y);
      stream.next(m.x);
      stream.next(m.z);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov3_pytorch_ros::target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov3_pytorch_ros::target_<ContainerAllocator>& v)
  {
    s << indent << "y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.y);
    s << indent << "x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.x);
    s << indent << "z: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.z);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV3_PYTORCH_ROS_MESSAGE_TARGET_H
